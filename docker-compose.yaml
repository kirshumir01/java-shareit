services:
  server:
    build: .
    image: shareit-server
    container_name: shareit-server
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/shareit
      - SPRING_DATASOURCE_USERNAME=shareit
      - SPRING_DATASOURCE_PASSWORD=shareit

  db:
    image: postgres:16.1
    container_name: postgres
    ports:
      - "6541:5432"
    environment:
      - POSTGRES_PASSWORD=shareit
      - POSTGRES_USER=shareit
      - POSTGRES_DB=shareit
    healthcheck:
      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER
      timeout: 5s
      interval: 5s
      retries: 10

  db-init:
    image: shareit-server
    container_name: db-init
    depends_on:
      db:
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        set -e
        psql postgresql://shareit:shareit@db:5432/shareit -v ON_ERROR_STOP=1 <<-EOSQL 
        DROP TABLE IF EXISTS users CASCADE;
        DROP TABLE IF EXISTS items CASCADE;
        DROP TABLE IF EXISTS bookings CASCADE;
        DROP TABLE IF EXISTS comments CASCADE;
  
        CREATE TABLE IF NOT EXISTS users (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY,
        name VARCHAR (100) NOT NULL,
        email VARCHAR (100) NOT NULL,
        PRIMARY KEY (id)
        );
  
        CREATE TABLE IF NOT EXISTS items (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY,
        name VARCHAR (100) NOT NULL,
        description VARCHAR(255) NOT NULL,
        is_available BOOL,
        owner_id BIGINT NOT NULL,
        PRIMARY KEY (id)
        );
  
        CREATE TABLE IF NOT EXISTS bookings (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY,
        start_time TIMESTAMP NOT NULL,
        end_time TIMESTAMP NOT NULL,
        item_id BIGINT NOT NULL,
        client_id BIGINT NOT NULL,
        status VARCHAR NOT NULL,
        PRIMARY KEY (id)
        );
  
        CREATE TABLE IF NOT EXISTS comments (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY,
        text VARCHAR(255) NOT NULL,
        item_id BIGINT,
        author_id BIGINT,
        created_time TIMESTAMP NOT NULL,
        PRIMARY KEY (id)
        );
  
        ALTER TABLE items ADD FOREIGN KEY (owner_id) REFERENCES users (id) ON DELETE CASCADE;
  
        ALTER TABLE bookings ADD FOREIGN KEY (client_id) REFERENCES users (id) ON DELETE CASCADE;
  
        ALTER TABLE bookings ADD FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE CASCADE;
  
        ALTER TABLE comments ADD FOREIGN KEY (author_id) REFERENCES users (id) ON DELETE CASCADE;
  
        ALTER TABLE comments ADD FOREIGN KEY (item_id) REFERENCES items (id);
        EOSQL